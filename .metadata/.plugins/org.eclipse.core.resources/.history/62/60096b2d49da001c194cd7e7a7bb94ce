package ezmet.enver.crazyeights;

import java.util.ArrayList;
import java.util.Random;

import ezmet.enver.cards.Card;
import ezmet.enver.cards.Deck;
import ezmet.enver.cards.Hand;
import ezmet.enver.mywindow.MyWindow;

public class CrazyEights extends MyWindow {
	private Deck deck = new Deck();
	private Hand myHand = new Hand();
	private Hand computerHand = new Hand();
	private Card discard;
	private ArrayList<Card> discardPile = new ArrayList<Card>();
	private Random rand = new Random();
	private char activeSuit = ' ';

	public CrazyEights() {
		setFontSize(30);
		for (int i = 0; i < 7; i++) {
			Card card1 = deal();
			myHand.add(card1);
			Card card2 = deal();
			computerHand.add(card2);
			// turn up the discard
			discard = deal();
			if (discard.getRank() == '8') {
				activeSuit = discard.getSuit();

			} else {
				activeSuit = ' ';
			}
		}
		playMyCard();
		playComputerCard();
		showStatus();
	}

	public void showStatus() {
		print();
		print("Computer Has " + computerHand.size() + " cards");
		print("My Hand " + myHand);
		print("Dicard: " + discard);
		if (discard.getRank() == '8') {
			print("Suit is " + activeSuit);
		}
	}

	private Card deal() {
		if (deck.size() == 0) {
			deck.reuse(discardPile);
			deck.shuffle();
			discardPile.clear();
			print();
			print("Reshuffled the discarded pile");
		}
		// deal a card from the deck
		Card card = deck.deal();
		return card;
	}
	
	// 16.8 Your turn
	private void drawMyCard(){
		Card drewCard=deal();
		print();
		print("Your drew is "+  drewCard);
		myHand.add(drewCard);
		//if I can play my drawn card, play it
		if(isValidPlay(drewCard.toString())){
			print("You played "+drewCard);
			discardMyCard(drewCard);
		}
	}
	private void discardMyCard(Card myCard){
		myHand.remove(myCard);
		discardPile.add(myCard);
		discard=myCard;
	}
	
	private void playMyCard(){
		showStatus();
		boolean validPlay=false;
		// repean until the valid has been entered
		while(!validPlay){
		String rankSuit=promtFor("Which card do you want to play? or press D to draw.");
		rankSuit=rankSuit.toUpperCase();
		//if draw, draw a card
		if(rankSuit.equals("D")){
			drawMyCard();
			validPlay=true;
		}
	
		//else play the card
		else if(isValidPlay(rankSuit)){
			Card selectedCard=new Card(rankSuit);
			discardMyCard(selectedCard);
			validPlay=true;
		}
	}
	}
	public boolean isValidPlay(String rankSuit){
		boolean validPlay=true;
		Card card=new Card(rankSuit);
		//is it a valid card?
		if(!card.isValid()){
			print(rankSuit+" is not a valid card.");
			validPlay=false;
		}
		// is the card in my hand?
		else if(!myHand.contains(card)){
			print(rankSuit+" is not in my hand.");
			validPlay=false;
			}
		// dose the discard match the rank of suit?
		else if((card.getSuit()!=discard.getSuit())&& (card.getRank()!=discard.getRank())){
			print(rankSuit+" can not be palyed on "+discard);
			validPlay=false;
		}
		return validPlay;
		
	}
	
	private void discardComputeGame(Card computerCard){
		computerHand.remove(computerCard);
		discardPile.add(discard);
		discard=computerCard;
		
	}
	private void playComputerCard(){
		System.out.println("Computer Hand: "+computerHand.toString());
		ArrayList<Card> playableCards=new ArrayList<Card>();
		for(int i=0;i<computerHand.size();i++){
			Card card=computerHand.cardAt(i);
			if((card.getSuit()==discard.getSuit())||card.getRank()==discard.getRank()){
				playableCards.add(card);
			}
		}
		//pick a random palyable card
		int numberOfPlayableCards=playableCards.size();
		if(numberOfPlayableCards>0){
			int pick=rand.nextInt(numberOfPlayableCards);
			Card playedCard=playableCards.get(pick);
			discardComputeGame(playedCard);
			
		}
		// if nothing could play, drew a card
		else{
			Card drewCard=deal();
			computerHand.add(drewCard);
			print();
			print("Computer drewed "+drewCard);
			//if it plays, play it
			if(drewCard.getSuit()==discard.getSuit()||drewCard.getRank()==discard.getRank()){
				discardComputeGame(drewCard);
			}
		
		}
	}

	public static void main(String[] args) {
		new CrazyEights();

	}

}
